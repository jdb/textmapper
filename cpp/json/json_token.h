// generated by Textmapper; DO NOT EDIT

#ifndef EXAMPLES_JSON_TOKEN_H_
#define EXAMPLES_JSON_TOKEN_H_

#include <array>
#include <cstdint>
#include <ostream>

#include "absl/strings/string_view.h"

namespace json {

// Token is an enum of all terminal symbols of the json language.
enum class Token {
  UNAVAILABLE = -1,
  EOI = 0,
  INVALID_TOKEN = 1,
  LBRACE = 2,  // {
  RBRACE = 3,  // }
  LBRACK = 4,  // [
  RBRACK = 5,  // ]
  COLON = 6,  // :
  COMMA = 7,  // ,
  FOO = 8,  // #
  SPACE = 9,
  MULTILINECOMMENT = 10,
  JSONSTRING = 11,
  JSONNUMBER = 12,
  ID = 13,
  KW_NULL = 14,  // null
  TRUE = 15,  // true
  FALSE = 16,  // false
  CHAR_A = 17,
  CHAR_B = 18,  // B
  ERROR = 19,
  NumTokens = 20
};

constexpr inline std::array<absl::string_view,
                            static_cast<size_t>(Token::NumTokens)>
    tokenStr = {
  "EOI",
  "INVALID_TOKEN",
  "LBRACE",  // {
  "RBRACE",  // }
  "LBRACK",  // [
  "RBRACK",  // ]
  "COLON",  // :
  "COMMA",  // ,
  "FOO",  // #
  "SPACE",
  "MULTILINECOMMENT",
  "JSONSTRING",
  "JSONNUMBER",
  "ID",
  "KW_NULL",  // null
  "TRUE",  // true
  "FALSE",  // false
  "CHAR_A",
  "CHAR_B",  // B
  "ERROR",
};

constexpr inline std::array<absl::string_view,
                            static_cast<size_t>(Token::NumTokens)>
    tokenName = {
  "eoi",
  "invalid_token",
  "'{'",  // {
  "'}'",  // }
  "'['",  // [
  "']'",  // ]
  "':'",  // :
  "','",  // ,
  "Foo",  // #
  "space",
  "MultiLineComment",
  "JSONString",
  "JSONNumber",
  "id",
  "kw_null",  // null
  "'true'",  // true
  "'false'",  // false
  "'A'",
  "'B'",  // B
  "error",
};

inline std::ostream& operator<<(std::ostream& os, Token tok) {
  int t = static_cast<int>(tok);
  if (t >= 0 && t < tokenStr.size()) {
    return os << tokenStr[t];
  }
  return os << "token(" << t << ")";
}

}  // namespace json

#endif  // EXAMPLES_JSON_TOKEN_H_
