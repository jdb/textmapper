
// Ast

class Identifier {
}

identifier  : Identifier ::=
	ID
  | 'brackets'
  | 'inline'
  | 'prec'
  | 'shift'
  | 'returns'
  | 'input'
  | 'left'
  | 'right'
  | 'nonassoc'
  | 'generate'
  | 'assert'
  | 'empty'
  | 'nonempty'
  | 'global'
  | 'explicit'
  | 'lookahead'
  | 'param'
  | 'flag'
  | 'no-eoi'
  | 's'
  | 'x'
  | 'expect'
  | 'expect-rr'
  | 'class'
  | 'interface'
  | 'void'
  | 'space'
  | 'layout'
  | 'language'
  | 'lalr'
  | 'lexer'
  | 'parser'
;

class Literal : ParamValue, Expression {
	any value;
}

literal  : Literal ::=
	value=scon
  | value=icon
  | value='true' as true
  | value='false' as false
;

class Pattern {
	String regexp;
}

pattern  : Pattern ::=
	{regexp}
;

qualified_id (String) ::=
	identifier
  | qualified_id '.' identifier
;

class Name {
	String qualifiedId;
}

name  : Name ::=
	qualifiedId=qualified_id
;

class Command : RhsPart {
}

command  : Command ::=
	code
;

class SyntaxProblem : LexerPart, GrammarPart, RhsPart, Expression {
}

syntax_problem  : SyntaxProblem ::=
	error
;

import__optlist  : list<Import>
	(this+=import_)* ;

class Input1 {
	Header header;
	list<Import> imports;
	list<Option> options;
	list<LexerPart> lexer;
	list<GrammarPart> parser;
}

input  : Input1 ::=
	{header} imports=import__optlist options=option_optlist lexer=lexer_section parser=parser_section?
;

option_optlist  : list<Option>
	(this+=option)* ;

class Header {
	Name name;
	Name target;
}

header  : Header ::=
	'language' {name} ('(' target=name ')')? ';'
;

lexer_section  : list<LexerPart> ::=
	'::' 'lexer' this=lexer_parts
;

parser_section  : list<GrammarPart> ::=
	'::' 'parser' this=grammar_parts
;

class Import {
	Identifier alias;
	String file;
}

import_  : Import ::=
	'import' alias=identifier? file=scon ';'
;

class Option {
	Identifier key;
	Expression value;
	SyntaxProblem syntaxProblem;
}

option  : Option ::=
	key=identifier '=' value=expression
  | syntaxProblem=syntax_problem
;

class Symref : Expression, ParamValue {
	Identifier name;
	SymrefArgs args;
}

symref  : Symref ::=
	name=identifier args=symref_args?
;

symref_noargs  : Symref ::=
	name=identifier
;

class RawType : NontermType {
}

rawType  : RawType ::=
	code
;

lexer_parts  : list<LexerPart>
	this+=lexer_part
		((this+=lexer_part | this+=syntax_problem))* ;

interface LexerPart {
}

lexer_part  : LexerPart ::=
	this=named_pattern
  | this=lexeme
  | this=states_clause
  | this=brackets_directive
  | this=start_conditions_scope
;

class NamedPattern : LexerPart {
	Identifier name;
	Pattern pattern;
}

named_pattern  : NamedPattern ::=
	name=identifier '=' {pattern}
;

class StartConditionsScope : LexerPart {
	StartConditions startConditions;
	list<LexerPart> lexerParts;
}

start_conditions_scope  : StartConditionsScope ::=
	startConditions=start_conditions '{' lexerParts=lexer_parts '}'
;

class StartConditions {
	list<Stateref> staterefListCommaSeparated;
}

start_conditions  : StartConditions ::=
	'<' '*' '>'
  | '<' staterefListCommaSeparated=stateref_list_Comma_separated '>'
;

stateref_list_Comma_separated  : list<Stateref>
	(this+=stateref
		separator ',')+ ;

class Lexeme : LexerPart {
	StartConditions startConditions;
	Identifier name;
	RawType rawType;
	ReportClause reportClause;
	Pattern pattern;
	Integer priority;
	LexemeAttrs attrs;
	Command command;
}

lexeme  : Lexeme ::=
	startConditions=start_conditions? name=identifier rawType=rawTypeopt {reportClause}? ':' ({pattern} priority=iconopt attrs=lexeme_attrsopt command=commandopt | attrs=lexeme_attrs)?
;

class LexemeAttrs {
	LexemeAttribute kind;
}

lexeme_attrs  : LexemeAttrs ::=
	'(' kind=lexeme_attribute ')'
;

enum LexemeAttribute {
	CLASS,
	SPACE,
	LAYOUT
}

lexeme_attribute  : LexemeAttribute ::=
	this='class' as LexemeAttribute.CLASS
  | this='space' as LexemeAttribute.SPACE
  | this='layout' as LexemeAttribute.LAYOUT
;

class BracketsDirective : LexerPart {
	Symref opening;
	Symref closing;
}

brackets_directive  : BracketsDirective ::=
	this=new.BracketsDirective: '%' 'brackets' opening=symref_noargs closing=symref_noargs ';'
;

lexer_state_list_Comma_separated  : list<LexerState>
	(this+=lexer_state
		separator ',')+ ;

class StatesClause : LexerPart {
	boolean exclusive;
	list<LexerState> states;
}

states_clause  : StatesClause ::=
	this=new.StatesClause: '%' exclusive='s' as false states=lexer_state_list_Comma_separated ';'
  | this=new.StatesClause: '%' exclusive='x' as true states=lexer_state_list_Comma_separated ';'
;

class Stateref {
	Identifier name;
}

stateref  : Stateref ::=
	name=identifier
;

class LexerState {
	Identifier name;
}

lexer_state  : LexerState ::=
	name=identifier
;

grammar_parts  : list<GrammarPart>
	this+=grammar_part
		((this+=grammar_part | this+=syntax_problem))* ;

interface GrammarPart {
}

grammar_part  : GrammarPart ::=
	this=nonterm
  | this=template_param
  | this=directive
;

class Nonterm : GrammarPart {
	Annotations annotations;
	Identifier name;
	NontermParams params;
	NontermType type;
	ReportClause defaultAction;
	list<Rule0> rules;
}

nonterm  : Nonterm ::=
	{annotations}? 'extend'? name=identifier params=nonterm_params? type=nonterm_type? defaultAction=reportClause? ':' {rules} ';'
;

interface NontermType {
}

class NontermTypeAST : NontermType {
	Symref reference;
}

class NontermTypeHint : NontermType {
	boolean inline;
	KindKind kind;
	list<Symref> implementsClause;
	enum KindKind {
		CLASS,
		VOID,
		INTERFACE
	}
}

nonterm_type  : NontermType ::=
	this=new.NontermTypeAST: 'returns' reference=symref_noargs
  | this=new.NontermTypeHint: inline='inline' as true? kind='class' as KindKind.CLASS implementsClause=implements_clauseopt
  | this=new.NontermTypeHint: kind='interface' as KindKind.INTERFACE
  | this=new.NontermTypeHint: kind='void' as KindKind.VOID
  | this=rawType
;

implements_clause  : list<Symref> ::=
	'implements' this=references_cs
;

enum Assoc {
	LEFT,
	RIGHT,
	NONASSOC
}

assoc  : Assoc ::=
	this='left' as Assoc.LEFT
  | this='right' as Assoc.RIGHT
  | this='nonassoc' as Assoc.NONASSOC
;

enum ParamModifier {
	EXPLICIT,
	GLOBAL,
	LOOKAHEAD
}

param_modifier  : ParamModifier ::=
	this='explicit' as ParamModifier.EXPLICIT
  | this='global' as ParamModifier.GLOBAL
  | this='lookahead' as ParamModifier.LOOKAHEAD
;

class TemplateParam : GrammarPart {
	ParamModifier modifier;
	ParamType paramType;
	Identifier name;
	ParamValue paramValue;
}

template_param  : TemplateParam ::=
	this=new.TemplateParam: '%' modifier=param_modifier? paramType=param_type name=identifier ('=' paramValue=param_value)? ';'
;

class DirectivePrio : GrammarPart {
	Assoc assoc;
	list<Symref> symbols;
}

class DirectiveInput : GrammarPart {
	list<Inputref> inputRefs;
}

class DirectiveInterface : GrammarPart {
	list<Identifier> ids;
}

class DirectiveAssert : GrammarPart {
	KindKind kind;
	RhsSet rhsSet;
	enum KindKind {
		EMPTY,
		NONEMPTY
	}
}

class DirectiveSet : GrammarPart {
	Identifier name;
	RhsSet rhsSet;
}

class DirectiveExpect : GrammarPart {
	Integer icon;
}

class DirectiveExpectRR : GrammarPart {
	Integer icon;
}

directive  : GrammarPart ::=
	this=new.DirectivePrio: '%' {assoc} symbols=references ';'
  | this=new.DirectiveInput: '%' 'input' inputRefs=inputref_list_Comma_separated ';'
  | this=new.DirectiveInterface: '%' 'interface' ids=identifier_list_Comma_separated ';'
  | this=new.DirectiveAssert: '%' 'assert' (kind='empty' as KindKind.EMPTY | kind='nonempty' as KindKind.NONEMPTY) {rhsSet} ';'
  | this=new.DirectiveSet: '%' 'generate' name=identifier '=' {rhsSet} ';'
  | this=new.DirectiveExpect: '%' 'expect' {icon} ';'
  | this=new.DirectiveExpectRR: '%' 'expect-rr' {icon} ';'
;

identifier_list_Comma_separated  : list<Identifier>
	(this+=identifier
		separator ',')+ ;

inputref_list_Comma_separated  : list<Inputref>
	(this+=inputref
		separator ',')+ ;

class Inputref {
	Symref reference;
	boolean noeoi;
}

inputref  : Inputref ::=
	reference=symref_noargs noeoi='no-eoi' as true?
;

references  : list<Symref>
	(this+=symref_noargs)+ ;

references_cs  : list<Symref>
	(this+=symref_noargs
		separator ',')+ ;

rule0_list_Or_separated  : list<Rule0>
	(this+=rule0
		separator '|')+ ;

rules  : list<Rule0> ::=
	this=rule0_list_Or_separated
;

class Rule0 {
	PredicateExpression predicate;
	list<RhsPart> list;
	RhsSuffix suffix;
	ReportClause action;
	SyntaxProblem error;
}

rule0  : Rule0 ::=
	{predicate}? list=rhsParts? suffix=rhsSuffixopt action=reportClause?
  | error=syntax_problem
;

interface PredicateExpression {
}

predicate  : PredicateExpression ::=
	'[' this=predicate_expression ']'
;

class RhsSuffix {
	KindKind kind;
	Symref symref;
	enum KindKind {
		PREC,
		SHIFT
	}
}

rhsSuffix  : RhsSuffix ::=
	'%' kind='prec' as KindKind.PREC symref=symref_noargs
  | '%' kind='shift' as KindKind.SHIFT symref=symref_noargs
;

class ReportClause {
	Identifier action;
	list<Identifier> flags;
	ReportAs reportAs;
}

reportClause  : ReportClause ::=
	'->' action=identifier ('/' flags=identifier_list_Comma_separated)? {reportAs}?
;

class ReportAs {
	Identifier identifier;
}

reportAs  : ReportAs ::=
	'as' {identifier}
;

rhsParts  : list<RhsPart>
	this+=rhsPart
		((this+=rhsPart | this+=syntax_problem))* ;

interface RhsPart {
}

rhsPart  : RhsPart ::=
	this=rhsAnnotated
  | this=command
  | this=rhsStateMarker
  | this=rhsLookahead
;

lookahead_predicate_list_And_separated  : list<LookaheadPredicate>
	(this+=lookahead_predicate
		separator '&')+ ;

class RhsLookahead : RhsPart {
	list<LookaheadPredicate> predicates;
}

rhsLookahead  : RhsLookahead ::=
	'(?=' predicates=lookahead_predicate_list_And_separated ')'
;

class LookaheadPredicate {
	boolean negate;
	Symref symrefNoargs;
}

lookahead_predicate  : LookaheadPredicate ::=
	negate='!' as true? symrefNoargs=symref_noargs
;

class RhsStateMarker : RhsPart {
	Identifier name;
}

rhsStateMarker  : RhsStateMarker ::=
	'.' name=identifier
;

class RhsAnnotated : RhsPart {
	Annotations annotations;
	RhsPart inner;
}

rhsAnnotated  : RhsPart ::=
	this=rhsAssignment
  | this=new.RhsAnnotated: {annotations} inner=rhsAssignment
;

class RhsAssignment : RhsPart {
	Identifier id;
	boolean addition;
	RhsPart inner;
}

rhsAssignment  : RhsPart ::=
	this=rhsOptional
  | this=new.RhsAssignment: id=identifier ('=' | addition='+=' as true) inner=rhsOptional
;

class RhsQuantifier : RhsPart {
	RhsPart inner;
	QuantifierKind quantifier;
	enum QuantifierKind {
		QUEST,
		PLUS,
		MULT
	}
}

rhsOptional  : RhsPart ::=
	this=rhsCast
  | this=new.RhsQuantifier: inner=rhsCast quantifier='?' as QuantifierKind.QUEST
;

class RhsCast : RhsPart {
	RhsPart inner;
	Symref target;
}

class RhsAsLiteral : RhsPart {
	RhsPart inner;
	Literal literal;
}

rhsCast  : RhsPart ::=
	this=rhsPrimary
  | this=new.RhsCast: inner=rhsPrimary 'as' target=symref
  | this=new.RhsAsLiteral: inner=rhsPrimary 'as' {literal}
;

class RhsSymbol : RhsPart {
	Symref reference;
}

class RhsNested : RhsPart {
	list<Rule0> rules;
}

class RhsList : RhsPart {
	list<RhsPart> ruleParts;
	list<Symref> separator;
	boolean atLeastOne;
}

class RhsIgnored : RhsPart {
	list<Rule0> rules;
}

rhsPrimary  : RhsPart ::=
	this=new.RhsSymbol: reference=symref
  | this=new.RhsNested: '(' {rules} ')'
  | this=new.RhsList: '(' ruleParts=rhsParts 'separator' separator=references ')' atLeastOne='+' as true
  | this=new.RhsList: '(' ruleParts=rhsParts 'separator' separator=references ')' atLeastOne='*' as false
  | this=new.RhsQuantifier: inner=rhsPrimary quantifier='*' as QuantifierKind.MULT
  | this=new.RhsQuantifier: inner=rhsPrimary quantifier='+' as QuantifierKind.PLUS
  | this=new.RhsIgnored: '$' '(' {rules} ')'
  | this=rhsSet
;

class RhsSet : RhsPart {
	SetExpression expr;
}

rhsSet  : RhsSet ::=
	this=new.RhsSet: 'set' '(' expr=setExpression ')'
;

interface SetExpression {
}

class SetSymbol : SetExpression {
	Identifier operator;
	Symref symbol;
}

class SetCompound : SetExpression {
	SetExpression inner;
}

class SetComplement : SetExpression {
	SetExpression inner;
}

setPrimary  : SetExpression ::=
	this=new.SetSymbol: operator=identifier? symbol=symref
  | this=new.SetCompound: '(' inner=setExpression ')'
  | this=new.SetComplement: '~' inner=setPrimary
;

class SetBinary : SetExpression {
	SetExpression left;
	KindKind kind;
	SetExpression right;
	enum KindKind {
		OR,
		AND
	}
}

setExpression  : SetExpression ::=
	this=setPrimary
  | this=new.SetBinary: left=setExpression kind='|' as KindKind.OR right=setExpression
  | this=new.SetBinary: left=setExpression kind='&' as KindKind.AND right=setExpression
;

annotation_list  : list<Annotation>
	(this+=annotation)+ ;

class Annotations {
	list<Annotation> annotations;
}

annotations  : Annotations ::=
	annotations=annotation_list
;

class Annotation {
	Identifier name;
	Expression expression;
	SyntaxProblem syntaxProblem;
}

annotation  : Annotation ::=
	'@' name=identifier ('=' {expression})?
  | '@' syntaxProblem=syntax_problem
;

nonterm_param_list_Comma_separated  : list<NontermParam>
	(this+=nonterm_param
		separator ',')+ ;

class NontermParams {
	list<NontermParam> list;
}

nonterm_params  : NontermParams ::=
	'<' list=nonterm_param_list_Comma_separated '>'
;

interface NontermParam {
}

class InlineParameter : NontermParam {
	Identifier paramType;
	Identifier name;
	ParamValue paramValue;
}

nonterm_param  : NontermParam ::=
	this=param_ref
  | this=new.InlineParameter: paramType=identifier name=identifier ('=' paramValue=param_value)?
;

class ParamRef : NontermParam {
	Identifier ref;
}

param_ref  : ParamRef ::=
	ref=identifier
;

argument_list_Comma_separated  : list<Argument>
	(this+=argument
		separator ',')+ ;

argument_list_Comma_separatedopt  : list<Argument> ::=
	this=argument_list_Comma_separated?
;

class SymrefArgs {
	list<Argument> argList;
}

symref_args  : SymrefArgs ::=
	'<' argList=argument_list_Comma_separatedopt '>'
;

class Argument {
	ParamRef name;
	ParamValue val;
	BoolKind bool;
	enum BoolKind {
		PLUS,
		TILDE
	}
}

argument  : Argument ::=
	name=param_ref ':' val=param_value
  | (bool='+' as BoolKind.PLUS | bool='~' as BoolKind.TILDE)? name=param_ref
;

enum ParamType {
	FLAG,
	PARAM
}

param_type  : ParamType ::=
	this='flag' as ParamType.FLAG
  | this='param' as ParamType.PARAM
;

interface ParamValue {
}

param_value  : ParamValue ::=
	this=literal
  | this=symref_noargs
;

class BoolPredicate : PredicateExpression {
	boolean negated;
	ParamRef paramRef;
}

class ComparePredicate : PredicateExpression {
	ParamRef paramRef;
	KindKind kind;
	Literal literal;
	enum KindKind {
		ASSIGN_ASSIGN,
		EXCL_ASSIGN
	}
}

predicate_primary  : PredicateExpression ::=
	this=new.BoolPredicate: negated='!' as true? paramRef=param_ref
  | this=new.ComparePredicate: paramRef=param_ref (kind='==' as KindKind.ASSIGN_ASSIGN | kind='!=' as KindKind.EXCL_ASSIGN) {literal}
;

class PredicateBinary : PredicateExpression {
	PredicateExpression left;
	KindKind kind;
	PredicateExpression right;
	enum KindKind {
		AND_AND,
		OR_OR
	}
}

predicate_expression  : PredicateExpression ::=
	this=predicate_primary
  | this=new.PredicateBinary: left=predicate_expression kind='&&' as KindKind.AND_AND right=predicate_expression
  | this=new.PredicateBinary: left=predicate_expression kind='||' as KindKind.OR_OR right=predicate_expression
;

interface Expression {
}

class Array : Expression {
	list<Expression> content;
}

expression  : Expression ::=
	this=literal
  | this=symref
  | this=new.Array: '[' content=expression_list_Comma_separated? ','? ']'
  | this=syntax_problem
;

expression_list_Comma_separated  : list<Expression>
	(this+=expression
		separator ',')+ ;

rawTypeopt  : RawType ::=
	this=rawType?
;

iconopt (Integer) ::=
	icon?
;

lexeme_attrsopt  : LexemeAttrs ::=
	this=lexeme_attrs?
;

commandopt  : Command ::=
	this=command?
;

implements_clauseopt  : list<Symref> ::=
	this=implements_clause?
;

rhsSuffixopt  : RhsSuffix ::=
	this=rhsSuffix?
;

